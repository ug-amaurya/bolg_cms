


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  password      String    // Add this line

  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  content       String
  excerpt       String?
  featuredImage String?
  status        PostStatus @default(DRAFT)
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  categories    Category[] @relation("PostCategories")
  tags          Tag[]      @relation("PostTags")
  comments      Comment[]
  views         Int        @default(0)
  publishedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  posts       Post[] @relation("PostCategories")
  createdAt   DateTime @default(now())
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  authorId  String?
  author    User?         @relation(fields: [authorId], references: [id])
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Newsletter {
  id           String   @id @default(cuid())
  email        String   @unique
  subscribedAt DateTime @default(now())
  active       Boolean  @default(true)
}

enum Role {
  USER
  AUTHOR
  EDITOR
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}